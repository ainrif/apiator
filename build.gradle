import java.time.Instant

buildscript {
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'org.ajoberstar:grgit:2.2.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    }
}

apply from: "$rootProject.projectDir/gradle/versions.gradle"

ext.versions = [
        slf4j  : '1.7.9',
        groovy : '2.4.2',
        jackson: '2.6.1',
        jsr305 : '3.0.2'
]

allprojects {
    apply plugin: 'groovy'

    group = 'com.ainrif.apiator'
    version = versionHolder.version

    task publishRelease {
        onlyIf {
            versionHolder.release
        }
    }

    repositories {
        mavenLocal()
        jcenter()

        maven { url "http://dl.bintray.com/ainrif/maven" }
    }

    configurations {
        all {
            it.exclude group: 'commons-logging'
            it.exclude group: 'org.apache.logging.log4j'
            it.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        }
    }

    dependencies {
        compileOnly "org.slf4j:jcl-over-slf4j:${versions.slf4j}"
        compileOnly "org.slf4j:log4j-over-slf4j:${versions.slf4j}"

        testCompile "org.spockframework:spock-core:1.0-groovy-2.4", {
            exclude group: 'junit', module: 'junit-dep'
            exclude group: 'org.hamcrest'
            exclude group: 'org.codehaus.groovy', module: 'groovy-all'
        }

        testCompile "junit:junit:4.12", {
            exclude group: 'org.hamcrest'
        }

        testCompile 'cglib:cglib:3.2.2'
        testCompile 'org.hamcrest:hamcrest-all:1.3'
        testCompile 'org.apache.commons:commons-lang3:3.3.2'

        testCompile "org.slf4j:jcl-over-slf4j:${versions.slf4j}"
        testCompile "org.slf4j:log4j-over-slf4j:${versions.slf4j}"
        testCompile 'ch.qos.logback:logback-classic:1.1.2'
    }
}

subprojects {
    apply plugin: 'maven-publish'

    // todo #not_supported 1.7
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    def archiveReportsTask = task archiveReports(type: Zip) {
        from 'build/reports/tests'
        appendix = 'tests_reports'
        version = "${project.version}_${Instant.now()}"
        onlyIf {
            test.state.failure
        }
    }

    test {
        finalizedBy archiveReportsTask
        testLogging {
            exceptionFormat = 'full'
            showStandardStreams = true
        }
    }
}

dependencies {
    compile project(':core')
    compile project(':api')
    compile project(':provider:jax-rs-provider')
    compile project(':renderer:core-html-renderer')
    compile project(':renderer:core-json-renderer')
    compile project(':renderer:core-json-renderer:plugin:spi-plugin-core-json-renderer')
    compile project(':renderer:core-json-renderer:plugin:jakson-plugin-core-json-renderer')
    compile project(':renderer:core-json-renderer:plugin:jax-rs-plugin-core-json-renderer')
    compile project(':renderer:core-json-renderer:plugin:j8-plugin-core-json-renderer')
    compile project(':test:core-model-test')
    compile project(':test:jax-rs-model-test')
    compile project(':test:demo-model-test')
}

apply from: "$rootProject.projectDir/gradle/uiDev.gradle"

task publishGitTag {
    onlyIf {
        versionHolder.release
    }
    doLast {
        versionHolder.git.with {
            try {
                tag.add(name: project.version, annotate: false, force: true)
            } catch (Exception e) {
                // jGit doesn't process force flag properly at org.eclipse.jgit.api.TagCommand#updateTagRef:184
                if (e.class.simpleName != 'JGitInternalException' || !e.message.contains('NO_CHANGE')) {
                    throw e
                }
            }
            push(all: false)
            push(tags: true)
        }
    }
}

publishRelease.dependsOn publishGitTag

task wrapper(type: Wrapper) {
    gradleVersion = '4.1'
    distributionType = Wrapper.DistributionType.ALL
}
