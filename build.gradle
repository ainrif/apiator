import java.time.Instant

plugins {
    id "com.jfrog.bintray" version "1.2"
}

apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'java'
apply plugin: 'groovy'
apply from: "$rootProject.projectDir/gradle/uiDev.gradle"
apply from: "$rootProject.projectDir/gradle/dev.gradle"

sourceCompatibility = 1.8
targetCompatibility = 1.8
group = 'com.ainrif'
version = '0.2.2-SNAPSHOT'

ext.sharedManifest = manifest {
    attributes 'Implementation-Vendor': group,
            'Implementation-Title': name,
            'Implementation-Version': version
}

repositories {
    mavenLocal()
    jcenter()

    maven {
        url "http://dl.bintray.com/ainrif/maven"
    }
}

dependencies {

    compile "javax.servlet:javax.servlet-api:3.1.0"

    compile "org.codehaus.groovy:groovy-all:2.4.2"

    compile "org.slf4j:slf4j-api:1.7.9"
    compile "org.slf4j:jcl-over-slf4j:1.7.9"
    compile "org.slf4j:log4j-over-slf4j:1.7.9"

    compile "org.apache.commons:commons-lang3:3.3.2"
    compile "org.springframework:spring-core:4.1.6.RELEASE"
    compile "org.reflections:reflections:0.9.9"
    compile "javax.ws.rs:javax.ws.rs-api:2.0.1"

    compile "org.webjars:webjars-locator:0.21"
    compile "org.webjars:handlebars:3.0.0-1"
    compile "org.webjars:bootstrap:3.3.2-2", {
        exclude group: 'org.webjars', module: 'jquery'
    }
    compile "org.webjars:jquery:2.1.3"

    testCompile "org.spockframework:spock-core:1.0-groovy-2.4", {
        exclude group: 'junit', module: 'junit-dep'
        exclude group: 'org.hamcrest'
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }

    testCompile "junit:junit:4.12", {
        exclude group: 'org.hamcrest'
    }

    testCompile "org.hamcrest:hamcrest-all:1.3"
    testCompile "ch.qos.logback:logback-classic:1.1.2"
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
    distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

task archiveReports(type: Zip) {
    appendix = 'tests_reports'
    from 'build/reports/tests'
    version = "${project.version}_${Instant.now()}"
    onlyIf {
        test.state.failure
    }
}

test {
    finalizedBy archiveReports
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

jar {
    manifest {
        from sharedManifest
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
    manifest {
        from sharedManifest
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    manifest {
        from sharedManifest
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourcesJar
            artifact javadocJar
        }
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

bintray {
    if (project.hasProperty('bintray_api_user') && project.hasProperty('bintray_api_key')) {
        user = bintray_api_user
        key = bintray_api_key
    }

    publications = ['mavenJava']

    dryRun = false
    publish = true
    pkg {
        repo = 'maven'
        userOrg = 'ainrif'
        name = rootProject.name
        desc = 'Documentation generator for rest api on java'
        websiteUrl = 'https://bitbucket.org/ainrif/apiator'
        issueTrackerUrl = 'https://bitbucket.org/ainrif/apiator/issues'
        vcsUrl = 'https://bitbucket.org/ainrif/apiator.git'
        licenses = ['Apache-2.0']
        labels = ['rest', 'api', 'docs']
        publicDownloadNumbers = true
        version {
            vcsTag = project.version
        }
    }
}